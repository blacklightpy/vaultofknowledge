/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ReplaceAllPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  replaceAllOn: true
};
var ReplaceAllPlugin = class extends import_obsidian.Plugin {
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "restore-replace-all",
      name: "Undo replace all",
      callback: async () => {
        if (!this.saveState) {
          new import_obsidian.Notice("No replace all history to undo.");
          return;
        }
        for (const fileState of this.saveState.fileStates) {
          await this.app.vault.modify(fileState.file, fileState.content);
        }
        new import_obsidian.Notice(`Changes in ${this.saveState.fileStates.length} files undone.`);
        this.saveState = void 0;
      }
    });
    this.app.workspace.onLayoutReady(async () => {
      const searchLeaves = this.app.workspace.getLeavesOfType("search");
      for (const searchLeaf of searchLeaves) {
        if ((0, import_obsidian.requireApiVersion)("1.7.2")) {
          await searchLeaf.loadIfDeferred();
        }
        if (!searchLeaf.view) {
          new import_obsidian.Notice("Search view not found.");
          return;
        }
        const searchView = await searchLeaf.open(searchLeaf.view);
        this.searchView = searchView;
        this.init();
      }
    });
  }
  async init() {
    this.initReplaceAllRow();
    this.createReplaceAllButton();
  }
  createReplaceAllButton() {
    const searchView = this.searchView;
    const replaceAllParam = document.createElement("div");
    replaceAllParam.classList.add("setting-item");
    replaceAllParam.classList.add("mod-toggle");
    const replaceAllParamInfo = document.createElement("div");
    replaceAllParamInfo.classList.add("setting-item-info");
    const replaceAllParamLabel = document.createElement("div");
    replaceAllParamLabel.classList.add("setting-item-name");
    replaceAllParamLabel.textContent = "Replace all";
    const replaceAllParamControl = document.createElement("div");
    replaceAllParamControl.classList.add("setting-item-control");
    const replaceAllParamCheckboxContainer = document.createElement("div");
    replaceAllParamCheckboxContainer.classList.add("checkbox-container");
    replaceAllParamCheckboxContainer.classList.add("mod-small");
    if (this.settings.replaceAllOn) {
      replaceAllParamCheckboxContainer.classList.add("is-enabled");
    }
    replaceAllParamCheckboxContainer.addEventListener("click", (event) => {
      replaceAllParamCheckboxContainer.classList.toggle("is-enabled");
      this.toggleReplaceAllRow();
      this.settings.replaceAllOn = !this.settings.replaceAllOn;
      this.saveSettings();
    });
    const replaceAllParamCheckbox = document.createElement("input");
    replaceAllParamCheckbox.type = "checkbox";
    replaceAllParamInfo.appendChild(replaceAllParamLabel);
    replaceAllParamCheckboxContainer.appendChild(replaceAllParamCheckbox);
    replaceAllParamControl.appendChild(replaceAllParamCheckboxContainer);
    replaceAllParam.appendChild(replaceAllParamInfo);
    replaceAllParam.appendChild(replaceAllParamControl);
    const requestParams = searchView.searchParamsContainerEl;
    requestParams.appendChild(replaceAllParam);
  }
  toggleReplaceAllRow() {
    var _a;
    const searchView = this.searchView;
    const replaceAllRow = searchView.containerEl.querySelector(".search-replace-all-row");
    replaceAllRow == null ? void 0 : replaceAllRow.classList.toggle("hide-replace-all-row");
    const replaceAllButton = searchView.containerEl.querySelector(".search-replace-all");
    replaceAllButton == null ? void 0 : replaceAllButton.classList.toggle("is-active");
    if (!(replaceAllRow == null ? void 0 : replaceAllRow.classList.contains("hide-replace-all-row"))) {
      (_a = replaceAllRow == null ? void 0 : replaceAllRow.querySelector("input")) == null ? void 0 : _a.focus();
    }
  }
  async initReplaceAllRow() {
    const searchView = this.searchView;
    const searchRow = searchView.containerEl.querySelector(".search-row");
    const replaceAllRow = document.createElement("div");
    replaceAllRow.classList.add("search-replace-all-row");
    const replaceAllIcon = document.createElement("div");
    replaceAllIcon.classList.add("search-replace-all-icon");
    (0, import_obsidian.setIcon)(replaceAllIcon, "replace-all");
    replaceAllRow.appendChild(replaceAllIcon);
    const replaceAllField = document.createElement("input");
    replaceAllField.type = "text";
    replaceAllField.placeholder = "Replace with...";
    replaceAllField.classList.add("search-replace-all-input");
    replaceAllField.classList.add("clickable-icon");
    replaceAllField.addEventListener("keydown", this.replaceAllKey.bind(this));
    replaceAllRow.appendChild(replaceAllField);
    const replaceAllSubmit = document.createElement("div");
    replaceAllSubmit.classList.add("search-replace-all-submit");
    replaceAllSubmit.classList.add("clickable-icon");
    (0, import_obsidian.setIcon)(replaceAllSubmit, "corner-down-left");
    replaceAllSubmit.setAttribute("aria-label", "Replace all");
    replaceAllSubmit.addEventListener("click", this.replaceAll.bind(this));
    replaceAllRow.appendChild(replaceAllSubmit);
    searchRow == null ? void 0 : searchRow.insertAdjacentElement("afterend", replaceAllRow);
    if (!this.settings.replaceAllOn) {
      replaceAllRow.classList.add("hide-replace-all-row");
    }
  }
  async replaceAllKey(event) {
    if (event.key !== "Enter") {
      return;
    }
    event.preventDefault();
    await this.replaceAll();
  }
  async replaceAll() {
    const searchView = this.searchView;
    const replaceField = searchView.containerEl.querySelector(".search-replace-all-input");
    let replacements = 0;
    const searchResults = new Map(searchView.dom.resultDomLookup);
    const vault = this.app.vault;
    this.saveState = { fileStates: [] };
    for (const [key, value] of searchResults.entries()) {
      const file = key;
      const fileContent = await vault.read(file);
      this.saveState.fileStates.push({ file, content: fileContent });
      const rangeStarts = value.result.content.map((result) => result[0]);
      const rangeEnds = value.result.content.map((result) => result[1]);
      await this.replaceInFile(file, rangeStarts, rangeEnds, (replaceField == null ? void 0 : replaceField.value) || "");
      replacements += rangeStarts.length;
    }
    new import_obsidian.Notice(`Replaced ${replacements} matches.`);
  }
  async replaceInFile(file, starts, ends, replace) {
    if (!file)
      return;
    await this.app.workspace.openLinkText(file.path, "");
    const activeEditor = this.app.workspace.activeEditor;
    const editingTheCorrectFile = (activeEditor == null ? void 0 : activeEditor.file) === file;
    if (!editingTheCorrectFile)
      return;
    const editor = activeEditor == null ? void 0 : activeEditor.editor;
    if (!editor)
      return;
    const selections = [];
    const doc = editor.cm.state.doc;
    for (let i = 0; i < starts.length; i++) {
      const start = starts[i];
      const end = ends[i];
      const posStart = doc.lineAt(start);
      const lineStart = posStart.number - 1;
      const charStart = start - posStart.from;
      const posEnd = doc.lineAt(end);
      const lineEnd = posEnd.number - 1;
      const charEnd = end - posEnd.from;
      selections.push({ anchor: { line: lineStart, ch: charStart }, head: { line: lineEnd, ch: charEnd } });
    }
    editor.setSelections(selections);
    editor.replaceSelection(replace);
  }
};

/* nosourcemap */